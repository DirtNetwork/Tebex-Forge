
plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    flatDir {
        dir 'common/target'
        dir 'plugin-shared/target'
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    shade 'net.tebex:tebex-common:12.0.9'
    shade 'net.tebex:tebex-plugin-shared:12.0.9'
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier = ''

    configurations = [project.configurations.shade]

    relocate 'okhttp3', 'com.github.xniter.tebexio.internal.okhttp3'

    relocate 'okio', 'com.github.xniter.tebexio.internal.okio'

    relocate 'retrofit2', 'com.github.xniter.tebexio.internal.retrofit2'

    relocate 'com.fasterxml.jackson', 'com.github.xniter.tebexio.internal.jackson'

    relocate 'com.google.gson', 'com.github.xniter.tebexio.internal.com.google.gson'
    relocate 'com.google.common', 'com.github.xniter.tebexio.internal.com.google.common'
    relocate 'com.google.errorprone.annotations', 'com.github.xniter.tebexio.internal.com.google.errorprone.annotations'
    relocate 'com.google.j2objc.annotations', 'com.github.xniter.tebexio.internal.com.google.j2objc.annotations'
    relocate 'com.google.thirdparty.publicsuffix', 'com.github.xniter.tebexio.internal.com.google.thirdparty.publicsuffix'

    relocate 'javax.annotation', 'com.github.xniter.tebexio.internal.javax.annotation'
//    relocate 'javax.annotation.concurrent', 'net.buycraft.plugin.internal.javax.annotation.concurrent'
    relocate 'javax.annotation.meta', 'com.github.xniter.tebexio.internal.javax.annotation.meta'

    relocate 'org.checkerframework', 'com.github.xniter.tebexio.internal.org.checkerframework'
    relocate 'org.intellij.lang.annotations', 'com.github.xniter.tebexio.internal.org.intellij.lang.annotations'
    relocate 'org.jetbrains.annotations', 'com.github.xniter.tebexio.internal.org.jetbrains.annotations'


    relocate 'net.buycraft.plugin', 'com.github.xniter.tebexio'
    relocate 'net.buycraft.plugin.data', 'com.github.xniter.tebexio.data'
    relocate 'net.buycraft.plugin.execution', 'com.github.xniter.tebexio.execution'
    relocate 'net.buycraft.plugin.platform', 'com.github.xniter.tebexio.platform'
    relocate 'net.buycraft.plugin.shared', 'com.github.xniter.tebexio.shared'

    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
